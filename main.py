import telebot
import pandas as pd
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import email
import email.mime.application
import re
import phonenumbers
import os
from datetime import datetime

TOKEN = '7983356108:AAGiBAXrAHyk4RMSxE_d1QqGZMfUyN21lWg'
bot = telebot.TeleBot(TOKEN)

user_data = {}
admin_data = {}
EMAIL_ADDRESS = "sustown82@gmail.com"
PASSWORD = "iyxa rgwu ziwu yzoi"

ADMIN_CREDENTIALS = {
    "login": "admin",
    "password": "admin123"
}

QUESTION_TYPES = [
    "VUZ another question",
    "SUZ another question",
    "Another Question"
]

# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –ø–æ—á—Ç—É
def send_email(subject, body, to_email, filename=''):
    try:
        msg = MIMEMultipart()
        msg['From'] = EMAIL_ADDRESS
        msg['To'] = to_email
        msg['Subject'] = subject

        msg.attach(MIMEText(body, 'plain'))
        if len(filename) != 0:
            fp = open(filename, 'rb')
            att = email.mime.application.MIMEApplication(fp.read(), _subtype="xlsx")
            fp.close()
            att.add_header('Content-Disposition', 'attachment', filename=filename)
            msg.attach(att)

        smtpObj = smtplib.SMTP('smtp.gmail.com', 587)
        smtpObj.starttls()
        smtpObj.login(EMAIL_ADDRESS, PASSWORD)
        smtpObj.sendmail(EMAIL_ADDRESS, to_email, msg.as_string())
        smtpObj.quit()

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
        return False


FORM_FILES = {
    "practice": "practice_forms.xlsx",
    "summer_employment": "summer_employment_forms.xlsx",
    "post_study_employment": "post_study_employment_forms.xlsx",
    "entrance_vuz": "entrance_vuz_forms.xlsx",
    "SUZ": "suz_forms.xlsx"
}


def init_form_file(form_type):
    if not os.path.exists(FORM_FILES[form_type]):
        df = pd.DataFrame()
        df.to_excel(FORM_FILES[form_type], index=False)


# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É Excel
def save_form_to_excel(form_data, form_type):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–∫–µ—Ç—É –≤ Excel (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∫–µ—Ç, –Ω–µ –≤–æ–ø—Ä–æ—Å–æ–≤)"""
    if form_type not in FORM_FILES:
        return False

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
        form_data_copy = form_data.copy()

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        form_data_copy['–î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'] = datetime.now().strftime('%d.%m.%Y %H:%M')

        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã
        form_df = pd.DataFrame([form_data_copy])

        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        if os.path.exists(FORM_FILES[form_type]):
            existing_df = pd.read_excel(FORM_FILES[form_type])
            updated_df = pd.concat([existing_df, form_df], ignore_index=True)
        else:
            updated_df = form_df

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π DataFrame
        updated_df.to_excel(FORM_FILES[form_type], index=False)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: {e}")
        return False



# –±–ª–æ–∫ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –º–µ–Ω—é—à–µ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("üíº –¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ/–ø—Ä–∞–∫—Ç–∏–∫–∞"))
    markup.add(KeyboardButton("üéì –¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ"))
    markup.add(KeyboardButton("üóì –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"))
    markup.add(KeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å"))
    markup.add(KeyboardButton("""‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –ê–û ‚Äπ–ö–æ–Ω—Ü–µ—Ä–Ω ‚Äπ–ö–∞–ª–∞—à–Ω–∏–∫–æ–≤¬ª"""))
    return markup


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤–Ω—É—Ç—Ä–∏ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞/–ø—Ä–∞–∫—Ç–∏–∫–∏
def job_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("üí™ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞"))
    markup.add(KeyboardButton("‚òÄÔ∏è –õ–µ—Ç–Ω–µ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"))
    markup.add(KeyboardButton("üë®üèº‚Äçüéì –¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è"))
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é "–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ"
def education_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –í–£–ó–µ"))
    markup.add(KeyboardButton("–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –°–£–ó–µ"))
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é "–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –í–£–ó–µ "
def education_vuz_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–Ø —Ö–æ—á—É –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ —Ü–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –í–£–ó"))
    markup.add(KeyboardButton("–Ø —É–∂–µ –æ–±—É—á–∞—é—Å—å –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ –í–£–ó–µ"))
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é "–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –°–£–ó–µ "
def education_suz_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–Ø —Ö–æ—á—É –ø–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ —Ü–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –°–£–ó"))
    markup.add(KeyboardButton("–Ø —É–∂–µ –æ–±—É—á–∞—é—Å—å –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ –°–£–ó–µ"))
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return markup



# –º–µ–Ω—é –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∫–∏, —Å—Ç–∏–ø–µ–Ω–¥–∏–∏ –∏ –¥—Ä. –≤–æ–ø—Ä–æ—Å–∞
def alr_studying_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("üìú –ü–æ–ª—É—á–∏—Ç—å –ø–∞–º—è—Ç–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"))
    markup.add(KeyboardButton("üí∞ –£–∑–Ω–∞—Ç—å —Å—É–º–º—É —Å—Ç–∏–ø–µ–Ω–¥–∏–∏"))
    markup.add(KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å"))
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é "–î—Ä—É–≥–æ–µ"
def another_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("‚ùì –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å"))
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return markup


def contact_channel_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω"))
    markup.add(KeyboardButton("WhatsApp"))
    markup.add(KeyboardButton("Telegram"))
    return markup


def simple_question():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–î–∞"))
    markup.add(KeyboardButton("–ù–µ—Ç"))
    return markup



def confirm_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å"))
    markup.add(KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"))
    return markup


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∞–Ω–∫–µ—Ç—ã
def back_to_main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return markup


def admin_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è–º–∏"))
    markup.add(KeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è–º–∏"))
    markup.add(KeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"))
    markup.add(KeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"))
    markup.add(KeyboardButton("üìä –°–∫–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—ã"))
    markup.add(KeyboardButton("üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"))
    return markup

def admin_forms_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("üí™ –ê–Ω–∫–µ—Ç—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"))
    markup.add(KeyboardButton("‚òÄÔ∏è –ê–Ω–∫–µ—Ç—ã –ª–µ—Ç–Ω–µ–≥–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"))
    markup.add(KeyboardButton("üë®üèº‚Äçüéì –ê–Ω–∫–µ—Ç—ã —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è"))
    markup.add(KeyboardButton("üéì –ê–Ω–∫–µ—Ç—ã —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ –í–£–ó"))
    markup.add(KeyboardButton("üè´ –ê–Ω–∫–µ—Ç—ã —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ –°–£–ó"))
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"))
    return markup
# –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ —Å –º–µ–Ω—é—à–∫–∞–º–∏



# –±–ª–æ–∫ —Å–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ç–∞–±–ª–∏—Ü —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∞–Ω–∫–µ—Ç–∞–º–∏
@bot.message_handler(func=lambda message: message.text == "üìä –°–∫–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—ã" and message.chat.id in admin_data and admin_data[message.chat.id].get("authenticated", False))
def download_forms_menu(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∫–µ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", reply_markup=admin_forms_menu())


@bot.message_handler(func=lambda message: message.text == "üí™ –ê–Ω–∫–µ—Ç—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏" and message.chat.id in admin_data and admin_data[message.chat.id].get("authenticated", False))
def download_practice_forms(message):
    try:
        if os.path.exists(FORM_FILES["practice"]):
            with open(FORM_FILES["practice"], 'rb') as file:
                bot.send_document(message.chat.id, file, reply_markup=admin_forms_menu())
        else:
            bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=admin_forms_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}", reply_markup=admin_forms_menu())


@bot.message_handler(func=lambda message: message.text == "‚òÄÔ∏è –ê–Ω–∫–µ—Ç—ã –ª–µ—Ç–Ω–µ–≥–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞" and message.chat.id in admin_data and admin_data[message.chat.id].get("authenticated", False))
def download_summer_forms(message):
    try:
        if os.path.exists(FORM_FILES["summer_employment"]):
            with open(FORM_FILES["summer_employment"], 'rb') as file:
                bot.send_document(message.chat.id, file, reply_markup=admin_forms_menu())
        else:
            bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=admin_forms_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}", reply_markup=admin_forms_menu())


@bot.message_handler(func=lambda message: message.text == "üë®üèº‚Äçüéì –ê–Ω–∫–µ—Ç—ã —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è" and message.chat.id in admin_data and admin_data[message.chat.id].get("authenticated", False))
def download_post_study_forms(message):
    try:
        if os.path.exists(FORM_FILES["post_study_employment"]):
            with open(FORM_FILES["post_study_employment"], 'rb') as file:
                bot.send_document(message.chat.id, file, reply_markup=admin_forms_menu())
        else:
            bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=admin_forms_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}", reply_markup=admin_forms_menu())

@bot.message_handler(func=lambda message: message.text == "üéì –ê–Ω–∫–µ—Ç—ã —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ –í–£–ó" and message.chat.id in admin_data and admin_data[message.chat.id].get("authenticated", False))
def download_vuz_forms(message):
    try:
        if os.path.exists(FORM_FILES["entrance_vuz"]):
            with open(FORM_FILES["entrance_vuz"], 'rb') as file:
                bot.send_document(message.chat.id, file, reply_markup=admin_forms_menu())
        else:
            bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=admin_forms_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}", reply_markup=admin_forms_menu())

@bot.message_handler(func=lambda message: message.text == "üè´ –ê–Ω–∫–µ—Ç—ã —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ –°–£–ó" and message.chat.id in admin_data and admin_data[message.chat.id].get("authenticated", False))
def download_suz_forms(message):
    try:
        if os.path.exists(FORM_FILES["SUZ"]):
            with open(FORM_FILES["SUZ"], 'rb') as file:
                bot.send_document(message.chat.id, file, reply_markup=admin_forms_menu())
        else:
            bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=admin_forms_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}", reply_markup=admin_forms_menu())
# –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ —Å–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü

# –≤–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é" and message.chat.id in admin_data and admin_data[message.chat.id].get("authenticated", False))
def back_to_admin_menu(message):
    bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_menu())



# –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∞–Ω–∫–µ—Ç–∞—Ö
# –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
def check_contact_channel(channel):
    if str(channel).lower() in ["—Ç–µ–ª–µ—Ñ–æ–Ω", "whatsapp", "telegram"]:
        return True

    else:
        return False


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
def check_simple_question(answer):
    if str(answer).lower() in ["–¥–∞", '–Ω–µ—Ç']:
        return True

    else:
        return False


# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì
def check_dates(birthdate):
    pattern = r"^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.(19|20)\d\d-(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.(19|20)\d\d$"

    if re.match(pattern, birthdate):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
        return True

    else:
        return False


# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì
def check_birthdate(birthdate):
    pattern = r"^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.(19|20)\d\d$"
    if re.match(pattern, birthdate):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
        return True

    else:
        return False


# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
def check_phone_number(phone_number):
    try:
        phone_number = phonenumbers.parse(phone_number)
        return phonenumbers.is_possible_number(phone_number)
    except:
        return False


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
def check_full_name(fio):
    pattern = r"^[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+$"  # —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á
    if re.match(pattern, fio):  # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
        return True

    else:
        return False
# –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏




# —Å–∞–º —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç!üëã –≠—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç –ê–û ¬´–ö–æ–Ω—Ü–µ—Ä–Ω –ö–∞–ª–∞—à–Ω–∏–∫–æ–≤¬ª . –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç-–±–æ—Ç –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ\n/start",
                     reply_markup=main_menu())


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ö–ö
@bot.message_handler(func=lambda message: message.text == """‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –ê–û ‚Äπ–ö–æ–Ω—Ü–µ—Ä–Ω ‚Äπ–ö–∞–ª–∞—à–Ω–∏–∫–æ–≤¬ª""")
def admin_login_start(message):
    with open("KK.jpg", 'rb') as file:
        bot.send_photo(message.chat.id, file)
    bot.send_message(message.chat.id, """–ê–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ "–ö–æ–Ω—Ü–µ—Ä–Ω "–ö–∞–ª–∞—à–Ω–∏–∫–æ–≤" - —ç—Ç–æ –≤–µ–¥—É—â–µ–µ –æ–±–æ—Ä–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –≤ —Å—Ñ–µ—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–µ–ª–∫–æ–≤–æ–≥–æ –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è, —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏, —Å—Ç–∞–Ω–∫–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–æ–≤.–ú—ã —É–¥–µ–ª—è–µ–º –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—é –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—é –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è""")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@bot.message_handler(commands=['admin'])
def admin_login_start(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    bot.register_next_step_handler(msg, admin_login_check)


# –ø—Ä–∏–µ–º –≤–≤–æ–¥–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
def admin_login_check(message):
    login = message.text
    admin_data[message.chat.id] = {"login": login}
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(msg, admin_password_check)


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
def admin_password_check(message):
    password = message.text
    login = admin_data[message.chat.id]["login"]

    if login == ADMIN_CREDENTIALS["login"] and password == ADMIN_CREDENTIALS["password"]:
        bot.send_message(message.chat.id, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup=admin_menu())
        admin_data[message.chat.id]["authenticated"] = True
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", reply_markup=main_menu())
        if message.chat.id in admin_data:
            del admin_data[message.chat.id]


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
@bot.message_handler(func=lambda message: message.text == "üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
def admin_logout(message):
    if message.chat.id in admin_data:
        del admin_data[message.chat.id]
    bot.send_message(message.chat.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", reply_markup=main_menu())


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ –∑–∞–º–µ–Ω–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ —Å—Ç–µ–ø–µ–Ω–¥–∏—è–º–∏
@bot.message_handler(func=lambda message: message.text == "‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è–º–∏" and
                                          message.chat.id in admin_data and admin_data[message.chat.id].get("authenticated", False))
def request_upload_file_grants(message):
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel —Å–æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è–º–∏ (—Å—Ç–∏–ø–µ–Ω–¥–∏—è.xlsx):")
    bot.register_next_step_handler(msg, handle_upload_file_grants)


# —Å–∞–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—Ä—É–≥–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å–æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è–º–∏
def handle_upload_file_grants(message):
    try:
        if message.document:
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open("—Å—Ç–∏–ø–µ–Ω–¥–∏—è.xlsx", 'wb') as new_file:
                new_file.write(downloaded_file)

            bot.send_message(message.chat.id, "‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∏–ø–µ–Ω–¥–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=admin_menu())
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª", reply_markup=admin_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}", reply_markup=admin_menu())


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–∞–±–ª–∏—Ü—ã —Å–æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è–º–∏
@bot.message_handler(func=lambda message: message.text == "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è–º–∏" and
                                          message.chat.id in admin_data and admin_data[message.chat.id].get("authenticated", False))
def download_grants_file(message):
    try:
        if os.path.exists("—Å—Ç–∏–ø–µ–Ω–¥–∏—è.xlsx"):
            with open("—Å—Ç–∏–ø–µ–Ω–¥–∏—è.xlsx", 'rb') as file:
                bot.send_document(message.chat.id, file, reply_markup=admin_menu())
        else:
            bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª —Å—Ç–∏–ø–µ–Ω–¥–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=admin_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}", reply_markup=admin_menu())


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ —Å–º–µ–Ω–µ —Ç–∞–±–ª–∏—Ü—ã
@bot.message_handler(func=lambda message: message.text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π" and
                                          message.chat.id in admin_data and admin_data[message.chat.id].get("authenticated", False))
def request_upload_file(message):
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel —Å —Ç–∞–±–ª–∏—Ü–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (events.xlsx):")
    bot.register_next_step_handler(msg, handle_upload_file)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∞–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
def handle_upload_file(message):
    try:
        if message.document:
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open("events.xlsx", 'wb') as new_file:
                new_file.write(downloaded_file)

            bot.send_message(message.chat.id, "‚úÖ –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=admin_menu())
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª", reply_markup=admin_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}", reply_markup=admin_menu())


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É —Ç–∞–±–ª–∏—Ü—ã —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
@bot.message_handler(func=lambda message: message.text == "üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π" and
                                          message.chat.id in admin_data and admin_data[message.chat.id].get(
    "authenticated", False))
def download_events_file(message):
    try:
        if os.path.exists("events.xlsx"):
            with open("events.xlsx", 'rb') as file:
                bot.send_document(message.chat.id, file, reply_markup=admin_menu())
        else:
            bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=admin_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}", reply_markup=admin_menu())


# –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
def back_to_main(message):
    user_data[message.chat.id] = {"step": "", "form_type": ""}
    bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


# –≤—Ö–æ–¥ –≤ –≤–µ—Ç–∫—É —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏
@bot.message_handler(func=lambda message: message.text == "üíº –¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ/–ø—Ä–∞–∫—Ç–∏–∫–∞")
def employment_practice(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç:", reply_markup=job_menu())


# –º–µ–Ω—é—à–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –°–£–ó–∞ –∏–ª–∏ –í–£–ó–∞
@bot.message_handler(func=lambda message: message.text == "üéì –¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
def targeted_training(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç:", reply_markup=education_menu())
    user_data[message.chat.id] = {"step": "‚ÑπÔ∏è –§.–ò.–û", "form_type": "SUZ another question"}


# –º–µ–Ω—é –≤–µ—Ç–∫–∏ –¥—Ä—É–≥–æ–µ
@bot.message_handler(func=lambda message: message.text == "üí¨ –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å")
def ask_question_other(message):
    bot.send_message(message.chat.id, "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=back_to_main_menu())
    user_data[message.chat.id] = {"step": "üìù –í–æ–ø—Ä–æ—Å", "form_type": "Another Question"}


# –Ω–∞—á–∞–ª–æ –¥—Ä—É–≥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞


# –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∏–æ
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìù –í–æ–ø—Ä–æ—Å" and user_data.get(message.chat.id, {}).get("form_type") == "Another Question")
def get_another_quest_drugoe(message):
    user_data[message.chat.id]["üìù –í–æ–ø—Ä–æ—Å"] = message.text
    user_data[message.chat.id]["step"] = "name"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§.–ò.–û:", reply_markup=back_to_main_menu())


# –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–º—è, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "name" and user_data.get(message.chat.id,{}).get("form_type") == "Another Question")
def get_name_drugoe(message):
    msg = message.text
    if check_full_name(msg):
        user_data[message.chat.id]["‚ÑπÔ∏è –§.–ò.–û"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
        return 0

    user_data[message.chat.id]["step"] = "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())


# –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –µ–≥–æ –≤–≤–æ–¥–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏" and user_data.get(message.chat.id, {}).get("form_type") == "Another Question")
def get_contact_channel_drugoe(message):
    msg = message.text
    if check_contact_channel(msg):
        user_data[message.chat.id]["üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é —Å–Ω–∏–∑—É")
        return 0

    user_data[message.chat.id]["step"] = "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890:", reply_markup=back_to_main_menu())

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" and user_data.get(message.chat.id, {}).get("form_type") == "Another Question")
def get_phone_number_drugoe(message):
    msg = message.text
    if check_phone_number(msg):
        user_data[message.chat.id]["üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: +71234567890")
        return 0
    user_data[message.chat.id]["step"] = "–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"

    bot.send_message(message.chat.id,f"–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –í—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?", reply_markup=simple_question())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö" and user_data.get(message.chat.id, {}).get("form_type") == "Another Question")
def get_phone_number_drugoe(message):
    msg = message.text
    if check_simple_question(msg):
        user_data[message.chat.id]["üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç", reply_markup=simple_question())
        return 0

    user_data[message.chat.id]["step"] = "confirm_send"
    application_text = "\n".join(
        [f"{key}: {value}" for key, value in user_data[message.chat.id].items() if
         key not in ["step", "form_type"]])
    bot.send_message(message.chat.id,f"–í–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{application_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",reply_markup=confirm_menu())

 #–∫–æ–Ω–µ—Ü –¥—Ä—É–≥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞

# –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞, –æ–±—É—á–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –°–£–ó–µ –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ö–æ—á–µ—Ç –ø–æ—Å—Ç—É–ø–∏—Ç—å
@bot.message_handler(func=lambda message: message.text == "–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –°–£–ó–µ")
def targeted_training_suz(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç:", reply_markup=education_suz_menu())


# —Å—É–∑ —É–∂–µ –∏–¥–µ—Ç –æ–±—É—á–µ–Ω–∏–µ
@bot.message_handler(func=lambda message: message.text == "–Ø —É–∂–µ –æ–±—É—á–∞—é—Å—å –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ –°–£–ó–µ")
def alr_studying_suz(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç:", reply_markup=alr_studying_menu())
    user_data[message.chat.id] = {"step": "‚ÑπÔ∏è –§.–ò.–û", "form_type": "SUZ another question"}


# –≤—ã–¥–∞—á–∞ –ø–∞–º—è—Ç–∫–∏ –ø–æ –°–£–ó—É
@bot.message_handler(func=lambda message: message.text == "üìú –ü–æ–ª—É—á–∏—Ç—å –ø–∞–º—è—Ç–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ another question")
def get_memo_suz(message):
    bot.send_message(message.chat.id, "–í–æ—Ç –≤–∞—à–∞ –ø–∞–º—è—Ç–∫–∞:", reply_markup=back_to_main_menu())
    with open("–ë—É–∫–ª–µ—Ç –°–£–ó.pdf", 'rb') as file:
        bot.send_document(message.chat.id, file)


# —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —Å—Ç–∏–ø–µ–Ω–¥–∏—è
@bot.message_handler(func=lambda message: message.text == "üí∞ –£–∑–Ω–∞—Ç—å —Å—É–º–º—É —Å—Ç–∏–ø–µ–Ω–¥–∏–∏" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ another question")
def get_scholarship_summ_suz(message):
    bot.send_message(message.chat.id, "–í —Ñ–∞–π–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—É–º–º–∞–º —Å—Ç–∏–ø–µ–Ω–¥–∏–π:", reply_markup=back_to_main_menu())
    with open("—Å—Ç–∏–ø–µ–Ω–¥–∏—è.xlsx", 'rb') as file:
        bot.send_document(message.chat.id, file)


# –∞–Ω–∫–µ—Ç–∞ –¥—Ä—É–≥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@bot.message_handler(func=lambda message: message.text == "‚ùì –ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ another question")
def start_another_quest_suz(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=back_to_main_menu())
    user_data[message.chat.id]["step"] = "question"

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "question" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ another question")
def get_another_quest_suz(message):
    user_data[message.chat.id]["üìù –í–æ–ø—Ä–æ—Å"] = message.text
    user_data[message.chat.id]["step"] = "name"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§.–ò.–û:", reply_markup=back_to_main_menu())

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "name" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ another question")
def get_name_another_quest_suz(message):
    msg = message.text
    if check_full_name(msg):
        user_data[message.chat.id]["‚ÑπÔ∏è –§.–ò.–û"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
        return 0

    user_data[message.chat.id]["step"] = "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ another question")
def get_contact_channel_another_suz(message):
    msg = message.text
    if check_contact_channel(msg):
        user_data[message.chat.id]["üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é —Å–Ω–∏–∑—É")
        return 0

    user_data[message.chat.id]["step"] = "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ another question")
def get_phone_number_another_suz(message):
    msg = message.text
    if check_phone_number(msg):
        user_data[message.chat.id]["üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: +71234567890")
        return 0
    user_data[message.chat.id]["step"] = "üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"

    bot.send_message(message.chat.id,f"–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –í—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?", reply_markup=simple_question())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ another question")
def get_agreement_another_suz(message):
    msg = message.text
    if check_simple_question(msg):
        user_data[message.chat.id]["üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç", reply_markup=simple_question())
        return 0

    user_data[message.chat.id]["step"] = "confirm_send"
    application_text = "\n".join(
        [f"{key}: {value}" for key, value in user_data[message.chat.id].items() if
         key not in ["step", "form_type"]])
    bot.send_message(message.chat.id,f"–í–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{application_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",reply_markup=confirm_menu())

#–∫–æ–Ω–µ—Ü –∞–Ω–∫–µ—Ç—ã –°–£–ó–∞


# –ê–Ω–∫–µ—Ç–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ —Å—É–∑–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç—Å—é–¥–∞
@bot.message_handler(func=lambda message: message.text == "–Ø —Ö–æ—á—É –ø–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ —Ü–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –°–£–ó")
def start_suz_form(message):
    user_data[message.chat.id] = {"step": "‚ÑπÔ∏è –§.–ò.–û", "form_type": "SUZ"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§.–ò.–û:", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "‚ÑπÔ∏è –§.–ò.–û" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ")
def get_full_name_suz(message):
    msg = message.text
    if check_full_name(msg):
        user_data[message.chat.id]["‚ÑπÔ∏è –§.–ò.–û"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
        return 0

    user_data[message.chat.id]["step"] = "üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ")
def get_birthdate_suz(message):
    msg = message.text
    if check_birthdate(msg):
        user_data[message.chat.id]["üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–¥.–º–º.–≥–≥–≥–≥")
        return 0
    user_data[message.chat.id]["step"] = "üèôÔ∏è –ì–æ—Ä–æ–¥"
    bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üèôÔ∏è –ì–æ—Ä–æ–¥" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ")
def get_city_suz(message):
    user_data[message.chat.id]["üèôÔ∏è –ì–æ—Ä–æ–¥"] = message.text
    user_data[message.chat.id]["step"] = "üè´ –°–£–ó"
    bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–º –°–£–ó–µ –æ–±—É—á–∞–µ—Ç–µ—Å—å?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üè´ –°–£–ó" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ")
def get_suz_suz(message):
    user_data[message.chat.id]["üè´ –°–£–ó"] = message.text
    user_data[message.chat.id]["step"] = "üóÇÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üóÇÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ")
def get_dir_of_train_suz(message):
    user_data[message.chat.id]["üóÇÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"] = message.text
    user_data[message.chat.id]["step"] = "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ")
def get_contact_channel_suz(message):
    msg = message.text
    if check_contact_channel(msg):
        user_data[message.chat.id]["üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é —Å–Ω–∏–∑—É")
        return 0

    user_data[message.chat.id]["step"] = "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ")
def get_phone_number_suz(message):
    msg = message.text
    if check_phone_number(msg):
        user_data[message.chat.id]["üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: +71234567890")
        return 0
    user_data[message.chat.id]["step"] = "üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"

    bot.send_message(message.chat.id,f"–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –í—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?", reply_markup=simple_question())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ")
def get_agreement_suz(message):
    msg = message.text
    if check_simple_question(msg):
        user_data[message.chat.id]["üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç", reply_markup=simple_question())
        return 0

    user_data[message.chat.id]["step"] = "confirm_send"
    application_text = "\n".join(
        [f"{key}: {value}" for key, value in user_data[message.chat.id].items() if
         key not in ["step", "form_type"]])
    bot.send_message(message.chat.id,f"–í–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{application_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",reply_markup=confirm_menu())
#–∫–æ–Ω–µ—Ü –∞–Ω–∫–µ—Ç—ã –°–£–ó–∞

# –ê–Ω–∫–µ—Ç–∞ –¥–ª—è "–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –í–£–ó–µ"
# entrance - –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ
# –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞, –æ–±—É—á–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –í–£–ó–µ –∏–ª–∏ —Ö–æ—á–µ—Ç –ø–æ—Å—Ç—É–ø–∏—Ç—å
@bot.message_handler(func=lambda message: message.text == "–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –í–£–ó–µ")
def targeted_training_vuz(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç:", reply_markup=education_vuz_menu())


@bot.message_handler(func=lambda message: message.text == "–Ø —Ö–æ—á—É –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ —Ü–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –í–£–ó")
def start_entrance_vuz_form(message):
    user_data[message.chat.id] = {"step": "‚ÑπÔ∏è –§.–ò.–û", "form_type": "entrance_vuz"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§.–ò.–û:", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "‚ÑπÔ∏è –§.–ò.–û" and user_data.get(message.chat.id, {}).get("form_type") == "entrance_vuz")
def get_full_name_entrance_vuz(message):
    msg = message.text
    if check_full_name(msg):
        user_data[message.chat.id]["‚ÑπÔ∏è –§.–ò.–û"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
        return 0

    user_data[message.chat.id]["step"] = "üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" and user_data.get(message.chat.id, {}).get("form_type") == "entrance_vuz")
def get_birth_date_entrance_vuz(message):
    msg = message.text
    if check_birthdate(msg):
        user_data[message.chat.id]["üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–¥.–º–º.–≥–≥–≥–≥")
        return 0
    user_data[message.chat.id]["step"] = "üèôÔ∏è –ì–æ—Ä–æ–¥"
    bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üèôÔ∏è –ì–æ—Ä–æ–¥" and user_data.get(message.chat.id, {}).get("form_type") == "entrance_vuz")
def get_city_entrance_vuz(message):
    user_data[message.chat.id]["üèôÔ∏è –ì–æ—Ä–æ–¥"] = message.text
    user_data[message.chat.id]["step"] = "üíØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ï–ì–≠/–≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π"
    bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ï–ì–≠/–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π:")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üíØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ï–ì–≠/–≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π" and user_data.get(message.chat.id, {}).get("form_type") == "entrance_vuz")
def get_result_entrance_vuz(message):
    user_data[message.chat.id]["üíØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ï–ì–≠/–≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π"] = message.text
    user_data[message.chat.id]["step"] = "üìä –í–∞—Ä–∏–∞–Ω—Ç—ã –í–£–ó–æ–≤"
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –í–£–ó —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìä –í–∞—Ä–∏–∞–Ω—Ç—ã –í–£–ó–æ–≤" and user_data.get(message.chat.id, {}).get("form_type") == "entrance_vuz")
def get_variants_entrance_vuz(message):
    user_data[message.chat.id]["üìä –í–∞—Ä–∏–∞–Ω—Ç—ã –í–£–ó–æ–≤"] = message.text
    user_data[message.chat.id]["step"] = "üóÇÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üóÇÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" and user_data.get(message.chat.id, {}).get("form_type") == "entrance_vuz")
def get_direction_entrance_vuz(message):
    user_data[message.chat.id]["üóÇÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"] = message.text
    user_data[message.chat.id]["step"] = "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏" and user_data.get(message.chat.id, {}).get("form_type") == "entrance_vuz")
def get_contact_channel_entrance_vuz(message):
    msg = message.text
    if check_contact_channel(msg):
        user_data[message.chat.id]["üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é —Å–Ω–∏–∑—É")
        return 0

    user_data[message.chat.id]["step"] = "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" and user_data.get(message.chat.id, {}).get("form_type") == "entrance_vuz")
def get_phone_number_entrance_vuz(message):
    msg = message.text
    if check_phone_number(msg):
        user_data[message.chat.id]["üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: +71234567890")
        return 0
    user_data[message.chat.id]["step"] = "üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"

    bot.send_message(message.chat.id,f"–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –í—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?", reply_markup=simple_question())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö" and user_data.get(message.chat.id, {}).get("form_type") == "entrance_vuz")
def get_agreement_entrance_vuz(message):
    msg = message.text
    if check_simple_question(msg):
        user_data[message.chat.id]["üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç", reply_markup=simple_question())
        return 0

    user_data[message.chat.id]["step"] = "confirm_send"
    application_text = "\n".join(
        [f"{key}: {value}" for key, value in user_data[message.chat.id].items() if
         key not in ["step", "form_type"]])
    bot.send_message(message.chat.id,f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n{application_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",reply_markup=confirm_menu())

# —è —É–∂–µ –æ–±—É—á–∞—é—Å—å –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É —Ü–æ –≤ –í–£–ó–µ
@bot.message_handler(func=lambda message: message.text == "–Ø —É–∂–µ –æ–±—É—á–∞—é—Å—å –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ –í–£–ó–µ")
def alr_studying_vuz(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç:", reply_markup=alr_studying_menu())
    user_data[message.chat.id] = {"step": "‚ÑπÔ∏è –§.–ò.–û", "form_type": "VUZ another question"}


# –≤—ã–¥–∞—á–∞ –ø–∞–º—è—Ç–∫–∏ –ø–æ –í–£–ó—É
@bot.message_handler(
    func=lambda message: message.text == "üìú –ü–æ–ª—É—á–∏—Ç—å –ø–∞–º—è—Ç–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è" and user_data.get(
        message.chat.id, {}).get("form_type") == "VUZ another question")
def get_memo_vuz(message):
    bot.send_message(message.chat.id, "–í–æ—Ç –≤–∞—à–∞ –ø–∞–º—è—Ç–∫–∞:", reply_markup=back_to_main_menu())
    with open("–ë—É–∫–ª–µ—Ç –í–£–ó.pdf", 'rb') as file:
        bot.send_document(message.chat.id, file)


#—É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —Å—Ç–∏–ø–µ–Ω–¥–∏—è
@bot.message_handler(func=lambda message: message.text == "üí∞ –£–∑–Ω–∞—Ç—å —Å—É–º–º—É —Å—Ç–∏–ø–µ–Ω–¥–∏–∏" and user_data.get(message.chat.id, {}).get("form_type") == "VUZ another question")
def get_scholarship_summ_suz(message):
    bot.send_message(message.chat.id, "–í —Ñ–∞–π–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—É–º–º–∞–º —Å—Ç–∏–ø–µ–Ω–¥–∏–π:", reply_markup=back_to_main_menu())
    with open("—Å—Ç–∏–ø–µ–Ω–¥–∏—è.xlsx", 'rb') as file:
        bot.send_document(message.chat.id, file)


#–∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å
@bot.message_handler(func=lambda message: message.text == "‚ùì –ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å" and user_data.get(message.chat.id, {}).get("form_type") == "VUZ another question")
def start_another_quest_vuz(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=back_to_main_menu())
    user_data[message.chat.id]["step"] = "question"

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "question" and user_data.get(message.chat.id, {}).get("form_type") == "VUZ another question")
def get_another_quest_vuz(message):
    user_data[message.chat.id]["üìù –í–æ–ø—Ä–æ—Å"] = message.text
    user_data[message.chat.id]["step"] = "name"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§.–ò.–û:", reply_markup=back_to_main_menu())

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "name" and user_data.get(message.chat.id, {}).get("form_type") == "VUZ another question")
def get_name_another_quest_vuz(message):
    msg = message.text
    if check_full_name(msg):
        user_data[message.chat.id]["‚ÑπÔ∏è –§.–ò.–û"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
        return 0

    user_data[message.chat.id]["step"] = "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏" and user_data.get(message.chat.id, {}).get("form_type") == "VUZ another question")
def get_contact_channel_another_vuz(message):
    msg = message.text
    if check_contact_channel(msg):
        user_data[message.chat.id]["üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é —Å–Ω–∏–∑—É")
        return 0

    user_data[message.chat.id]["step"] = "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" and user_data.get(message.chat.id, {}).get("form_type") == "VUZ another question")
def get_phone_number_another_suz(message):
    msg = message.text
    if check_phone_number(msg):
        user_data[message.chat.id]["üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: +71234567890")
        return 0
    user_data[message.chat.id]["step"] = "üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"

    bot.send_message(message.chat.id,f"–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –í—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?", reply_markup=simple_question())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö" and user_data.get(message.chat.id, {}).get("form_type") == "VUZ another question")
def get_agreement_another_suz(message):
    msg = message.text
    if check_simple_question(msg):
        user_data[message.chat.id]["üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç", reply_markup=simple_question())
        return 0

    user_data[message.chat.id]["step"] = "confirm_send"
    application_text = "\n".join(
        [f"{key}: {value}" for key, value in user_data[message.chat.id].items() if
         key not in ["step", "form_type"]])
    bot.send_message(message.chat.id,f"–í–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{application_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",reply_markup=confirm_menu())

# –ê–Ω–∫–µ—Ç–∞ –¥–ª—è "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞"
@bot.message_handler(func=lambda message: message.text == "üí™ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞")
def start_practice_form(message):
    user_data[message.chat.id] = {"step": "‚ÑπÔ∏è –§.–ò.–û", "form_type": "practice"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§.–ò.–û:", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "‚ÑπÔ∏è –§.–ò.–û" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_full_name_practice(message):
    msg = message.text
    if check_full_name(msg):
        user_data[message.chat.id]["‚ÑπÔ∏è –§.–ò.–û"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
        return 0

    user_data[message.chat.id]["step"] = "üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_birth_date_practice(message):
    msg = message.text
    if check_birthdate(msg):
        user_data[message.chat.id]["üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–¥.–º–º.–≥–≥–≥–≥")
        return 0
    user_data[message.chat.id]["step"] = "üìö –û–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å"
    bot.send_message(message.chat.id, "–ì–¥–µ –æ–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å?", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìö –û–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_education_practice(message):
    user_data[message.chat.id]["üìö –û–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å"] = message.text
    user_data[message.chat.id]["step"] = "üë®üèΩ‚Äçüíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
    bot.send_message(message.chat.id, "–ü–æ –∫–∞–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏?", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üë®üèΩ‚Äçüíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_profession_practice(message):
    user_data[message.chat.id]["üë®üèΩ‚Äçüíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"] = message.text
    user_data[message.chat.id]["step"] = "üóÇÔ∏è –ö—É—Ä—Å"
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –∫—É—Ä—Å?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üóÇÔ∏è –ö—É—Ä—Å" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_course_practice(message):
    user_data[message.chat.id]["üóÇÔ∏è –ö—É—Ä—Å"] = message.text
    user_data[message.chat.id]["step"] = "üí® –ü—Ä–æ—à–ª–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"
    bot.send_message(message.chat.id, "–ü—Ä–æ—Ö–æ–¥–∏–ª–∏ –ª–∏ –ø—Ä–∞–∫—Ç–∏–∫—É —Ä–∞–Ω–µ–µ? –ï—Å–ª–∏ –¥–∞, —Ç–æ –≥–¥–µ?")



@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üí® –ü—Ä–æ—à–ª–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_previous_practice_practice(message):
    msg = message.text
    if "–Ω–µ—Ç" in msg.lower() and len(msg.lower()) == 3:
        user_data[message.chat.id]["üí® –ü—Ä–æ—à–ª–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"] = msg
        user_data[message.chat.id]["step"] = "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())
    elif "–¥–∞, " == msg.lower()[0:4]:
        user_data[message.chat.id]["üí® –ü—Ä–æ—à–ª–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"] = msg
        user_data[message.chat.id]["step"] = "‚è≥ –°—Ä–æ–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏"
        bot.send_message(message.chat.id, "–°—Ä–æ–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏?", reply_markup=back_to_main_menu())
    else:
        bot.send_message(message.chat.id,
                         """–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ª–∏–±–æ "–ù–µ—Ç", –ª–∏–±–æ "–î–∞" –∏ –≥–¥–µ –±—ã–ª–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é""")
        return 0


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "‚è≥ –°—Ä–æ–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_practice_duration_practice(message):
    msg = message.text
    if check_dates(msg):
        user_data[message.chat.id]["‚è≥ –°—Ä–æ–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏"] = message.text
        user_data[message.chat.id]["step"] = "üôå –ñ–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Ç–æ–º –∂–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏"
        bot.send_message(message.chat.id, "–•–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Ç–æ–º –∂–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏? (–î–∞/–ù–µ—Ç)")
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ª–∏ –≤—ã —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∞–ø–∏—Å–∞–ª–∏, —Ç.–µ.: –¥–¥.–º–º.–≥–≥–≥–≥-–¥–¥.–º–º.–≥–≥–≥–≥")
        return 0


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üôå –ñ–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Ç–æ–º –∂–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_same_department_practice(message):
    msg = message.text
    if check_simple_question(msg):
        user_data[message.chat.id]["üôå –ñ–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Ç–æ–º –∂–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç")
        return 0

    user_data[message.chat.id]["step"] = "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_contact_channel_practice(message):
    msg = message.text
    if check_contact_channel(msg):
        user_data[message.chat.id]["üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é —Å–Ω–∏–∑—É")
        return 0

    user_data[message.chat.id]["step"] = "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_phone_number_practice(message):
    msg = message.text
    if check_phone_number(msg):
        user_data[message.chat.id]["üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: +71234567890")
        return 0
    user_data[message.chat.id]["step"] = "üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"

    bot.send_message(message.chat.id,f"–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –í—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?", reply_markup=simple_question())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_agreement_practice(message):
    msg = message.text
    if check_simple_question(msg):
        user_data[message.chat.id]["üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç", reply_markup=simple_question())
        return 0

    user_data[message.chat.id]["step"] = "confirm_send"
    application_text = "\n".join(
        [f"{key}: {value}" for key, value in user_data[message.chat.id].items() if
         key not in ["step", "form_type"]])
    bot.send_message(message.chat.id,f"–í–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{application_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",reply_markup=confirm_menu())

# –ê–Ω–∫–µ—Ç–∞ –¥–ª—è "–õ–µ—Ç–Ω–µ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
@bot.message_handler(func=lambda message: message.text == "‚òÄÔ∏è –õ–µ—Ç–Ω–µ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
def start_summer_employment_form(message):
    user_data[message.chat.id] = {"step": "‚ÑπÔ∏è –§.–ò.–û", "form_type": "summer_employment"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§.–ò.–û:", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "‚ÑπÔ∏è –§.–ò.–û" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_full_name_summer(message):
    msg = message.text
    if check_full_name(msg):
        user_data[message.chat.id]["‚ÑπÔ∏è –§.–ò.–û"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á", reply_markup=back_to_main_menu())
        return 0

    user_data[message.chat.id]["step"] = "üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_birth_date_summer(message):
    msg = message.text
    if check_birthdate(msg):
        user_data[message.chat.id]["üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–¥.–º–º.–≥–≥–≥–≥")
        return 0
    user_data[message.chat.id]["step"] = "üìö –û–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å"
    bot.send_message(message.chat.id, "–ì–¥–µ –æ–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å?", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìö –û–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_education_summer(message):
    user_data[message.chat.id]["üìö –û–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å"] = message.text
    user_data[message.chat.id]["step"] = "üë®üèΩ‚Äçüíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
    bot.send_message(message.chat.id, "–ü–æ –∫–∞–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üë®üèΩ‚Äçüíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_profession_summer(message):
    user_data[message.chat.id]["üë®üèΩ‚Äçüíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"] = message.text
    user_data[message.chat.id]["step"] = "üóÇÔ∏è –ö—É—Ä—Å"
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –∫—É—Ä—Å?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üóÇÔ∏è –ö—É—Ä—Å" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_course_summer(message):
    user_data[message.chat.id]["üóÇÔ∏è –ö—É—Ä—Å"] = message.text
    user_data[message.chat.id]["step"] = "‚è≥ –ü–µ—Ä–∏–æ–¥ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
    bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "‚è≥ –ü–µ—Ä–∏–æ–¥ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_employment_period_summer(message):
    msg = message.text
    if check_dates(msg):
        user_data[message.chat.id]["‚è≥ –ü–µ—Ä–∏–æ–¥ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,–Ω–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥-–¥–¥.–º–º.–≥–≥–≥–≥")
        return 0

    user_data[message.chat.id]["step"] = "üíº –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"
    bot.send_message(message.chat.id, "–†–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –í—ã —Ä–∞–Ω–µ–µ, –µ—Å–ª–∏ –¥–∞, —Ç–æ –≥–¥–µ?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üíº –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_previous_work_summer(message):
    msg = message.text
    if "–Ω–µ—Ç" in msg.lower() and len(msg.lower()) == 3:
        user_data[message.chat.id]["üíº –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"] = msg
        user_data[message.chat.id]["step"] = "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())
    elif "–¥–∞, " == msg.lower()[0:4]:
        user_data[message.chat.id]["üíº –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"] = msg
        user_data[message.chat.id]["step"] = "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())
    else:
        bot.send_message(message.chat.id,
                         """–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ª–∏–±–æ "–ù–µ—Ç", –ª–∏–±–æ "–î–∞" –∏ –≥–¥–µ –í—ã —Ä–∞–±–æ—Ç–∞–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é""")
        return 0



@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_contact_channel_summer(message):
    msg = message.text
    if check_contact_channel(msg):
        user_data[message.chat.id]["üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é —Å–Ω–∏–∑—É", reply_markup=contact_channel_menu())
        return 0

    user_data[message.chat.id]["step"] = "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_phone_number_summer(message):
    msg = message.text
    if check_phone_number(msg):
        user_data[message.chat.id]["üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: +71234567890", reply_markup=back_to_main_menu())
        return 0
    user_data[message.chat.id]["step"] = "üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"

    bot.send_message(message.chat.id,f"–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –í—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?", reply_markup=simple_question())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_agreement_summer(message):
    msg = message.text
    if check_simple_question(msg):
        user_data[message.chat.id]["üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç", reply_markup=simple_question())
        return 0

    user_data[message.chat.id]["step"] = "confirm_send"
    application_text = "\n".join(
        [f"{key}: {value}" for key, value in user_data[message.chat.id].items() if
         key not in ["step", "form_type"]])
    bot.send_message(message.chat.id,f"–í–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{application_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",reply_markup=confirm_menu())

# –ê–Ω–∫–µ—Ç–∞ –¥–ª—è "–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è"
@bot.message_handler(func=lambda message: message.text == "üë®üèº‚Äçüéì –¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è")
def start_post_study_employment_form(message):
    user_data[message.chat.id] = {"step": "‚ÑπÔ∏è –§.–ò.–û", "form_type": "post_study_employment"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§.–ò.–û:", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "‚ÑπÔ∏è –§.–ò.–û" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_full_name_post_study(message):
    msg = message.text
    if check_full_name(msg):
        user_data[message.chat.id]["‚ÑπÔ∏è –§.–ò.–û"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
        return 0

    user_data[message.chat.id]["step"] = "üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_birth_date_post_study(message):
    msg = message.text
    if check_birthdate(msg):
        user_data[message.chat.id]["üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–¥.–º–º.–≥–≥–≥–≥")
        return 0
    user_data[message.chat.id]["step"] = "üìö –û–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å"
    bot.send_message(message.chat.id, "–ì–¥–µ –æ–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìö –û–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_education_post_study(message):
    user_data[message.chat.id]["üìö –û–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å"] = message.text
    user_data[message.chat.id]["step"] = "üë®üèΩ‚Äçüíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
    bot.send_message(message.chat.id, "–ü–æ –∫–∞–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üë®üèΩ‚Äçüíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_profession_post_study(message):
    user_data[message.chat.id]["üë®üèΩ‚Äçüíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"] = message.text
    user_data[message.chat.id]["step"] = "üóÇÔ∏è –ö—É—Ä—Å"
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –∫—É—Ä—Å?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üóÇÔ∏è –ö—É—Ä—Å" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_course_post_study(message):
    user_data[message.chat.id]["üóÇÔ∏è –ö—É—Ä—Å"] = message.text
    user_data[message.chat.id]["step"] = "üí® –ü—Ä–æ—à–ª–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"
    bot.send_message(message.chat.id, "–ü—Ä–æ—Ö–æ–¥–∏–ª–∏ –ª–∏ –ø—Ä–∞–∫—Ç–∏–∫—É —Ä–∞–Ω–µ–µ? –ï—Å–ª–∏ –¥–∞, —Ç–æ –≥–¥–µ?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üí® –ü—Ä–æ—à–ª–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_previous_practice_post_study(message):
    msg = message.text
    if "–Ω–µ—Ç" in msg.lower() and len(msg.lower()) == 3:
        user_data[message.chat.id]["üí® –ü—Ä–æ—à–ª–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"] = msg
        user_data[message.chat.id]["step"] = "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())
    elif "–¥–∞, " == msg.lower()[0:4]:
        user_data[message.chat.id]["üí® –ü—Ä–æ—à–ª–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"] = msg
        user_data[message.chat.id]["step"] = "‚è≥ –°—Ä–æ–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏"
        bot.send_message(message.chat.id, "–°—Ä–æ–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏?")
    else:
        bot.send_message(message.chat.id,
                         """–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ª–∏–±–æ "–ù–µ—Ç", –ª–∏–±–æ "–î–∞" –∏ –≥–¥–µ –±—ã–ª–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é""")
        return 0


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "‚è≥ –°—Ä–æ–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_practice_duration_post_study(message):
    msg = message.text
    if check_dates(msg):
        user_data[message.chat.id]["‚è≥ –°—Ä–æ–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏"] = message.text
        user_data[message.chat.id]["step"] = "üôå –ñ–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Ç–æ–º –∂–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏"
        bot.send_message(message.chat.id, "–•–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Ç–æ–º –∂–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏? (–î–∞/–ù–µ—Ç)")
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ª–∏ –≤—ã —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∞–ø–∏—Å–∞–ª–∏, —Ç.–µ.: –¥–¥.–º–º.–≥–≥–≥–≥-–¥–¥.–º–º.–≥–≥–≥–≥")
        return 0


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üôå –ñ–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Ç–æ–º –∂–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_same_department_post_study(message):
    msg = message.text
    if check_simple_question(msg):
        user_data[message.chat.id]["üôå –ñ–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Ç–æ–º –∂–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç")
        return 0

    user_data[message.chat.id]["step"] = "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_contact_channel_post_study(message):
    msg = message.text
    if check_contact_channel(msg):
        user_data[message.chat.id]["üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"] = message.text
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é —Å–Ω–∏–∑—É")
        return 0

    user_data[message.chat.id]["step"] = "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_phone_number_post_study(message):
    msg = message.text
    if check_phone_number(msg):
        user_data[message.chat.id]["üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: +71234567890")
        return 0
    user_data[message.chat.id]["step"] = "üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"

    bot.send_message(message.chat.id,f"–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –í—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?", reply_markup=simple_question())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_agreement_post_study(message):
    msg = message.text
    if check_simple_question(msg):
        user_data[message.chat.id]["üîè–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç", reply_markup=simple_question())
        return 0

    user_data[message.chat.id]["step"] = "confirm_send"
    application_text = "\n".join(
        [f"{key}: {value}" for key, value in user_data[message.chat.id].items() if
         key not in ["step", "form_type"]])
    bot.send_message(message.chat.id,f"–í–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{application_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",reply_markup=confirm_menu())

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "confirm_send")
def confirm_send(message):
    if message.text.lower() == "üì© –æ—Ç–ø—Ä–∞–≤–∏—Ç—å":
        form_data = {key: value for key, value in user_data[message.chat.id].items() if
                     key not in ["step", "form_type"]}
        form_type = user_data[message.chat.id].get("form_type")
        application_text = "\n".join([f"{key}: {value}" for key, value in form_data.items()])

        # –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ—á—Ç—É
        if form_type in QUESTION_TYPES:
            subject = f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ({'–ø–æ –í–£–ó—É' if form_type == 'VUZ another question' else '–ø–æ –°–£–ó—É' if form_type == 'SUZ another question' else '–¥—Ä—É–≥–æ–π'})"
            if send_email(subject, application_text, EMAIL_ADDRESS):
                bot.send_message(message.chat.id, "‚úîÔ∏è –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            else:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞.")

        # –ï—Å–ª–∏ —ç—Ç–æ –∞–Ω–∫–µ—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        else:
            if save_form_to_excel(form_data, form_type):
                bot.send_message(message.chat.id, "‚úîÔ∏è –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                if pd.read_excel(FORM_FILES[form_type]).shape[0] >= 3:
                    send_email(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã {'–ø—Ä–∞–∫—Ç–∏–∫–∞' if form_type == 'practice' else '–ª–µ—Ç–Ω–µ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ' if form_type == 'summer_employment' else '—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è' if form_type == 'post_study_employment' else '—Ü–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –í–£–ó–µ' if form_type=='entrance_vuz' else '—Ü–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –°–£–ó–µ'}","",EMAIL_ADDRESS,filename=FORM_FILES[form_type])
                    os.remove(FORM_FILES[form_type])




            else:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã.")

        bot.send_message(message.chat.id, f"–î–∞–Ω–Ω—ã–µ:\n\n{application_text}")
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                         reply_markup=main_menu())

        if form_type in ["practice", "summer_employment", "post_study_employment"]:
            with open("–ü–∞–º—è—Ç–∫–∞_–¥–ª—è_–±—É–¥—É—â–∏—Ö_–∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤.pdf", 'rb') as file:
                bot.send_document(message.chat.id, file)
        del user_data[message.chat.id]

    elif message.text.lower() == "‚úèÔ∏è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        if user_data[message.chat.id]["form_type"] == "Another Question":
            user_data[message.chat.id]["step"] = "üìù –í–æ–ø—Ä–æ—Å"
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å")
        elif user_data.get(message.chat.id, {}).get("form_type") == "VUZ another question" or user_data.get(
                message.chat.id, {}).get("form_type") == "SUZ another question":
            user_data[message.chat.id]["step"] = "question"
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å", reply_markup=back_to_main_menu())
        else:
            user_data[message.chat.id]["step"] = "‚ÑπÔ∏è –§.–ò.–û"
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§.–ò.–û:", reply_markup=back_to_main_menu())
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'.",
                         reply_markup=confirm_menu())


@bot.message_handler(func=lambda message: message.text == "üóì –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
def show_events(message):
    try:
        df = pd.read_excel('events.xlsx')

        markup = InlineKeyboardMarkup()

        for index, row in df.iterrows():
            event_name = row.iloc[0]
            event_date = row.iloc[1]
            event_url = row.iloc[2]

            try:
                event_date = pd.to_datetime(event_date).strftime('%d.%m.%Y')
            except:
                pass

            button_text = f"{event_name} ({event_date})"

            if isinstance(event_url, str) and event_url.startswith(('http://', 'https://')):
                markup.add(InlineKeyboardButton(text=button_text, url=event_url))
            else:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event_name}")

        if not markup.keyboard:
            bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
            return

        back_markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        back_markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", reply_markup=markup)

        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=back_markup)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {e}")
        bot.send_message(message.chat.id,
                         "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ üòû\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                         reply_markup=main_menu())


bot.polling(none_stop=True)
