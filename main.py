import telebot
import pandas as pd
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import re

TOKEN = ''
bot = telebot.TeleBot(TOKEN)

user_data = {}
EMAIL_ADDRESS = ""
PASSWORD = ""


def send_email(subject, body, to_email):
    try:
        msg = MIMEMultipart()
        msg['From'] = EMAIL_ADDRESS
        msg['To'] = to_email
        msg['Subject'] = subject

        msg.attach(MIMEText(body, 'plain'))
        smtpObj = smtplib.SMTP('smtp.gmail.com', 587)
        smtpObj.starttls()
        smtpObj.login(EMAIL_ADDRESS, PASSWORD)
        smtpObj.sendmail(EMAIL_ADDRESS, to_email, msg.as_string())
        smtpObj.quit()

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
        return False


def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("üíº –¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ/–ø—Ä–∞–∫—Ç–∏–∫–∞"))
    markup.add(KeyboardButton("üéì –¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ"))
    markup.add(KeyboardButton("üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"))
    markup.add(KeyboardButton("üí¨ –î—Ä—É–≥–æ–µ"))
    return markup


def job_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("üí™ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞"))
    markup.add(KeyboardButton("‚òÄÔ∏è –õ–µ—Ç–Ω–µ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"))
    markup.add(KeyboardButton("üë®üèº‚Äçüéì –¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è"))
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é "–î—Ä—É–≥–æ–µ"
def another_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("‚ùì –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å"))
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é "–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ"
def education_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –í–£–ó–µ"))
    markup.add(KeyboardButton("–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –°–£–ó–µ"))
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é "–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –í–£–ó–µ "
def education_vuz_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–Ø —Ö–æ—á—É –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ —Ü–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –í–£–ó"))
    markup.add(KeyboardButton("–Ø —É–∂–µ –æ–±—É—á–∞—é—Å—å –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ –í–£–ó–µ"))
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é "–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –°–£–ó–µ "
def education_suz_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–Ø —Ö–æ—á—É –ø–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ —Ü–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –°–£–ó"))
    markup.add(KeyboardButton("–Ø —É–∂–µ –æ–±—É—á–∞—é—Å—å –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ –°–£–ó–µ"))
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return markup

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∞–Ω–∫–µ—Ç—ã
def back_to_main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return markup


def contact_channel_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω"))
    markup.add(KeyboardButton("WhatsApp"))
    markup.add(KeyboardButton("Telegram"))
    return markup


def confirm_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å"))
    markup.add(KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"))
    return markup

#–º–µ–Ω—é –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∫–∏, —Å—Ç–∏–ø–µ–Ω–¥–∏–∏ –∏ –¥—Ä. –≤–æ–ø—Ä–æ—Å–∞
def alr_studying_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("üìú –ü–æ–ª—É—á–∏—Ç—å –ø–∞–º—è—Ç–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"))
    markup.add(KeyboardButton("üí∞ –£–∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç —Å—Ç–∏–ø–µ–Ω–¥–∏—è"))
    markup.add(KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å"))
    return markup

#–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–æ–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
def check_birthdate(birthdate):
  pattern = r"^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.(19|20)\d\d$" # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì
  if re.match(pattern, birthdate): # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
    return True
  else:
    return False

#–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
def check_phone_number(phone_number):
    pattern = re.compile(r"^(8|(\+7))\d{3}\d{3}\d{2}\d{2}$")
    if re.match(pattern,phone_number):
        return True
    else:
        return False


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!üëã –≠—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç –ê–û ¬´–ö–æ–Ω—Ü–µ—Ä–Ω –ö–∞–ª–∞—à–Ω–∏–∫–æ–≤¬ª . –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç-–±–æ—Ç –∑–∞–Ω–æ–≤–æ –Ω–∞–ø–∏—à–∏—Ç–µ\n/start", reply_markup=main_menu())


@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
def back_to_main(message):
    bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


@bot.message_handler(func=lambda message: message.text == "üíº –¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ/–ø—Ä–∞–∫—Ç–∏–∫–∞")
def employment_practice(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç:", reply_markup=job_menu())

#–º–µ–Ω—é—à–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –°–£–ó–∞ –∏–ª–∏ –í–£–ó–∞
@bot.message_handler(func=lambda message: message.text == "üéì –¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
def targeted_training(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç:", reply_markup=education_menu())
    user_data[message.chat.id] = {"step": "–§.–ò.–û", "form_type": "SUZ another question"}


#–º–µ–Ω—é –≤–µ—Ç–∫–∏ –¥—Ä—É–≥–æ–µ
@bot.message_handler(func=lambda message: message.text == "üí¨ –î—Ä—É–≥–æ–µ")
def ask_question_other(message):
    bot.send_message(message.chat.id, "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=back_to_main_menu())
    user_data[message.chat.id] = {"step": "‚ùì –í–æ–ø—Ä–æ—Å", "form_type": "Another Question"}

#–Ω–∞—á–∞–ª–æ –¥—Ä—É–≥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "‚ùì –í–æ–ø—Ä–æ—Å" and user_data.get(message.chat.id, {}).get("form_type") == "Another Question")
def get_another_quest_drugoe(message):
    user_data[message.chat.id]["‚ùì –í–æ–ø—Ä–æ—Å"] = message.text
    user_data[message.chat.id]["step"] = "name"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§.–ò.–û:", reply_markup=back_to_main_menu())

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "name" and user_data.get(message.chat.id,{}).get("form_type") == "Another Question")
def get_name_drugoe(message):
    user_data[message.chat.id]["‚ÑπÔ∏è –§.–ò.–û"] = message.text
    user_data[message.chat.id]["step"] = "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏" and user_data.get(message.chat.id, {}).get("form_type") == "Another Question")
def get_contact_channel_drugoe(message):
    user_data[message.chat.id]["üåê –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"] = message.text
    user_data[message.chat.id]["step"] = "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890 –∏–ª–∏ 81234567890:", reply_markup=back_to_main_menu())

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" and user_data.get(message.chat.id, {}).get("form_type") == "Another Question")
def get_phone_number_drugoe(message):
    msg = message.text
    if check_phone_number(msg):
        user_data[message.chat.id]["üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: +71234567890 –∏–ª–∏ 81234567890")
        return 0
    user_data[message.chat.id]["step"] = "confirm_send"
    application_text = "\n".join(
        [f"{key}: {value}" for key, value in user_data[message.chat.id].items() if
         key not in ["step", "form_type"]])

    bot.send_message(message.chat.id,f"–í–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{application_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",reply_markup=confirm_menu())
 #–∫–æ–Ω–µ—Ü –¥—Ä—É–≥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞

#–º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞, –æ–±—É—á–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –°–£–ó–µ –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ö–æ—á–µ—Ç –ø–æ—Å—Ç—É–ø–∏—Ç—å
@bot.message_handler(func=lambda message: message.text == "–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –°–£–ó–µ")
def targeted_training_suz(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç:", reply_markup=education_suz_menu())


#—Å—É–∑ —É–∂–µ –∏–¥–µ—Ç –æ–±—É—á–µ–Ω–∏–µ
@bot.message_handler(func=lambda message: message.text == "–Ø —É–∂–µ –æ–±—É—á–∞—é—Å—å –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ –°–£–ó–µ")
def alr_studying_suz(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç:", reply_markup=alr_studying_menu())
    user_data[message.chat.id] = {"step": "–§.–ò.–û", "form_type": "SUZ another question"}


#–≤—ã–¥–∞—á–∞ –ø–∞–º—è—Ç–∫–∏ –ø–æ –°–£–ó—É
@bot.message_handler(func=lambda message: message.text == "üìú –ü–æ–ª—É—á–∏—Ç—å –ø–∞–º—è—Ç–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ another question")
def get_memo_suz(message):
    bot.send_message(message.chat.id, "–í–æ—Ç –≤–∞—à–∞ –ø–∞–º—è—Ç–∫–∞:", reply_markup=back_to_main_menu())
    with open("–ë—É–∫–ª–µ—Ç –°–£–ó.pdf", 'rb') as file:
        bot.send_document(message.chat.id, file)


#—É–∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ —Å—Ç–∏–ø–µ–Ω–¥–∏—è –ø—Ä–∏–¥–µ—Ç
@bot.message_handler(func=lambda message: message.text == "üí∞ –£–∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç —Å—Ç–∏–ø–µ–Ω–¥–∏—è" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ another question")
def get_scholarship_date_suz(message):
    bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=main_menu())


#–∞–Ω–∫–µ—Ç–∞ –¥—Ä—É–≥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@bot.message_handler(func=lambda message: message.text == "–ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ another question")
def start_another_quest_suz(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=back_to_main_menu())
    user_data[message.chat.id]["step"] = "question"

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "question" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ another question")
def get_another_quest_suz(message):
    user_data[message.chat.id]["–í–æ–ø—Ä–æ—Å"] = message.text
    user_data[message.chat.id]["step"] = "name"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§.–ò.–û:", reply_markup=back_to_main_menu())

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "name" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ another question")
def get_name_another_quest_suz(message):
    user_data[message.chat.id]["–§.–ò.–û"] = message.text
    user_data[message.chat.id]["step"] = "–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ another question")
def get_contact_channel_suz(message):
    user_data[message.chat.id]["–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"] = message.text
    user_data[message.chat.id]["step"] = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ another question")
def get_phone_number_suz(message):
    msg = message.text
    if check_phone_number(msg):
        user_data[message.chat.id]["–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"] = msg
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: +71234567890 –∏–ª–∏ 81234567890")
        return 0
    user_data[message.chat.id]["step"] = "confirm_send"

    application_text = "\n".join(
        [f"{key}: {value}" for key, value in user_data[message.chat.id].items() if key not in ["step", "form_type"]])

    bot.send_message(message.chat.id,
                     f"–í–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{application_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",reply_markup=confirm_menu())
#–∫–æ–Ω–µ—Ü –∞–Ω–∫–µ—Ç—ã –°–£–ó–∞


# –ê–Ω–∫–µ—Ç–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ —Å—É–∑–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç—Å—é–¥–∞
@bot.message_handler(func=lambda message: message.text == "–Ø —Ö–æ—á—É –ø–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ —Ü–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –°–£–ó")
def start_suz_form(message):
    user_data[message.chat.id] = {"step": "–§.–ò.–û", "form_type": "SUZ"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§.–ò.–û:", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–§.–ò.–û" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ")
def get_full_name_suz(message):
    user_data[message.chat.id]["–§.–ò.–û"] = message.text
    user_data[message.chat.id]["step"] = "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ")
def get_birthdate_suz(message):
    msg = message.text
    if check_birthdate(msg):
        user_data[message.chat.id]["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–¥.–º–º.–≥–≥–≥–≥")
        return 0
    user_data[message.chat.id]["step"] = "–ì–æ—Ä–æ–¥"
    bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ì–æ—Ä–æ–¥" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ")
def get_city_suz(message):
    user_data[message.chat.id]["–ì–æ—Ä–æ–¥"] = message.text
    user_data[message.chat.id]["step"] = "–°–£–ó"
    bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–º –°–£–ó–µ –æ–±—É—á–∞–µ—Ç–µ—Å—å?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–°–£–ó" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ")
def get_suz_suz(message):
    user_data[message.chat.id]["–°–£–ó"] = message.text
    user_data[message.chat.id]["step"] = "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ")
def get_dir_of_train_suz(message):
    user_data[message.chat.id]["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"] = message.text
    user_data[message.chat.id]["step"] = "–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ")
def get_contact_channel_suz(message):
    user_data[message.chat.id]["–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"] = message.text
    user_data[message.chat.id]["step"] = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" and user_data.get(message.chat.id, {}).get("form_type") == "SUZ")
def get_phone_number_suz(message):
    msg = message.text
    if check_phone_number(msg):
        user_data[message.chat.id]["–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"] = msg
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: +71234567890 –∏–ª–∏ 81234567890")
        return 0
    user_data[message.chat.id]["step"] = "confirm_send"

    application_text = "\n".join(
        [f"{key}: {value}" for key, value in user_data[message.chat.id].items() if key not in ["step", "form_type"]])

    bot.send_message(message.chat.id,
                     f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n{application_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",reply_markup=confirm_menu())
#–∫–æ–Ω–µ—Ü –∞–Ω–∫–µ—Ç—ã –°–£–ó–∞

# –ê–Ω–∫–µ—Ç–∞ –¥–ª—è "–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –í–£–ó–µ"
# entrance - –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ
#–º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞, –æ–±—É—á–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –í–£–ó–µ –∏–ª–∏ —Ö–æ—á–µ—Ç –ø–æ—Å—Ç—É–ø–∏—Ç—å
@bot.message_handler(func=lambda message: message.text == "–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –í–£–ó–µ")
def targeted_training_vuz(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç:", reply_markup=education_vuz_menu())

@bot.message_handler(func=lambda message: message.text == "–Ø —Ö–æ—á—É –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ —Ü–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –í–£–ó")
def start_entrance_vuz_form(message):
    user_data[message.chat.id] = {"step": "–§.–ò.–û", "form_type": "entrance_vuz"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§.–ò.–û:", reply_markup=back_to_main_menu())

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–§.–ò.–û" and user_data.get(message.chat.id, {}).get("form_type") == "entrance_vuz")
def get_full_name_entrance_vuz(message):
    user_data[message.chat.id]["–§.–ò.–û"] = message.text
    user_data[message.chat.id]["step"] = "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" and user_data.get(message.chat.id, {}).get("form_type") == "entrance_vuz")
def get_birth_date_entrance_vuz(message):
    msg = message.text
    if check_birthdate(msg):
        user_data[message.chat.id]["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–¥.–º–º.–≥–≥–≥–≥")
        return 0
    user_data[message.chat.id]["step"] = "–ì–æ—Ä–æ–¥"
    bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ì–æ—Ä–æ–¥" and user_data.get(message.chat.id, {}).get("form_type") == "entrance_vuz")
def get_city_entrance_vuz(message):
    user_data[message.chat.id]["–ì–æ—Ä–æ–¥"] = message.text
    user_data[message.chat.id]["step"] = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ï–ì–≠/–≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π"
    bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ï–ì–≠/–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π:")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ï–ì–≠/–≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π" and user_data.get(message.chat.id, {}).get("form_type") == "entrance_vuz")
def get_result_entrance_vuz(message):
    user_data[message.chat.id]["–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ï–ì–≠/–≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π"] = message.text
    user_data[message.chat.id]["step"] = "–í–∞—Ä–∏–∞–Ω—Ç—ã –í–£–ó–æ–≤"
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –í–£–ó —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–í–∞—Ä–∏–∞–Ω—Ç—ã –í–£–ó–æ–≤" and user_data.get(message.chat.id, {}).get("form_type") == "entrance_vuz")
def get_variants_entrance_vuz(message):
    user_data[message.chat.id]["–í–∞—Ä–∏–∞–Ω—Ç—ã –í–£–ó–æ–≤"] = message.text
    user_data[message.chat.id]["step"] = "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" and user_data.get(message.chat.id, {}).get("form_type") == "entrance_vuz")
def get_direction_entrance_vuz(message):
    user_data[message.chat.id]["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"] = message.text
    user_data[message.chat.id]["step"] = "–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏" and user_data.get(message.chat.id, {}).get("form_type") == "entrance_vuz")
def get_contact_channel_entrance_vuz(message):
    user_data[message.chat.id]["–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"] = message.text
    user_data[message.chat.id]["step"] = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=back_to_main_menu())

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" and user_data.get(message.chat.id, {}).get("form_type") == "entrance_vuz")
def get_phone_number_entrance_vuz(message):
    msg = message.text
    if check_phone_number(msg):
        user_data[message.chat.id]["–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"] = msg
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: +71234567890 –∏–ª–∏ 81234567890")
        return 0
    user_data[message.chat.id]["step"] = "confirm_send"

    application_text = "\n".join(
        [f"{key}: {value}" for key, value in user_data[message.chat.id].items() if key not in ["step", "form_type"]])

    bot.send_message(message.chat.id,
                     f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n{application_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",reply_markup=confirm_menu())

#—è —É–∂–µ –æ–±—É—á–∞—é—Å—å –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É —Ü–æ –≤ –í–£–ó–µ
@bot.message_handler(func=lambda message: message.text == "–Ø —É–∂–µ –æ–±—É—á–∞—é—Å—å –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ –í–£–ó–µ")
def alr_studying_vuz(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç:", reply_markup=alr_studying_menu())
    user_data[message.chat.id] = {"step": "–§.–ò.–û", "form_type": "VUZ another question"}


#–≤—ã–¥–∞—á–∞ –ø–∞–º—è—Ç–∫–∏ –ø–æ –í–£–ó—É
@bot.message_handler(func=lambda message: message.text == "üìú –ü–æ–ª—É—á–∏—Ç—å –ø–∞–º—è—Ç–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è" and user_data.get(message.chat.id, {}).get("form_type") == "VUZ another question")
def get_memo_vuz(message):
    bot.send_message(message.chat.id, "–í–æ—Ç –≤–∞—à–∞ –ø–∞–º—è—Ç–∫–∞:", reply_markup=back_to_main_menu())
    with open("–ë—É–∫–ª–µ—Ç –í–£–ó.pdf", 'rb') as file:
        bot.send_document(message.chat.id, file)

#—É–∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ —Å—Ç–∏–ø–µ–Ω–¥–∏—è –ø—Ä–∏–¥–µ—Ç
@bot.message_handler(func=lambda message: message.text == "üí∞ –£–∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç —Å—Ç–∏–ø–µ–Ω–¥–∏—è" and user_data.get(message.chat.id, {}).get("form_type") == "VUZ another question")
def get_scholarship_date_suz(message):
    bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=main_menu())


#–∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å
@bot.message_handler(func=lambda message: message.text == "–ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å" and user_data.get(message.chat.id, {}).get("form_type") == "VUZ another question")
def start_another_quest_vuz(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=back_to_main_menu())
    user_data[message.chat.id]["step"] = "question"

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "question" and user_data.get(message.chat.id, {}).get("form_type") == "VUZ another question")
def get_another_quest_vuz(message):
    user_data[message.chat.id]["–í–æ–ø—Ä–æ—Å"] = message.text
    user_data[message.chat.id]["step"] = "name"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§.–ò.–û:", reply_markup=back_to_main_menu())

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "name" and user_data.get(message.chat.id, {}).get("form_type") == "VUZ another question")
def get_name_another_quest_vuz(message):
    user_data[message.chat.id]["–§.–ò.–û"] = message.text
    user_data[message.chat.id]["step"] = "–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏" and user_data.get(message.chat.id, {}).get("form_type") == "VUZ another question")
def get_contact_channel_vuz(message):
    user_data[message.chat.id]["–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"] = message.text
    user_data[message.chat.id]["step"] = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=back_to_main_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" and user_data.get(message.chat.id, {}).get("form_type") == "VUZ another question")
def get_phone_number_vuz(message):
    msg = message.text
    if check_phone_number(msg):
        user_data[message.chat.id]["–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: +71234567890 –∏–ª–∏ 81234567890")
        return 0
    user_data[message.chat.id]["step"] = "confirm_send"

    application_text = "\n".join(
        [f"{key}: {value}" for key, value in user_data[message.chat.id].items() if key not in ["step", "form_type"]])

    bot.send_message(message.chat.id,
                     f"–í–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{application_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",reply_markup=confirm_menu())

# –ê–Ω–∫–µ—Ç–∞ –¥–ª—è "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞"
@bot.message_handler(func=lambda message: message.text == "üí™ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞")
def start_practice_form(message):
    user_data[message.chat.id] = {"step": "–§.–ò.–û", "form_type": "practice"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§.–ò.–û:")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–§.–ò.–û" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_full_name_practice(message):
    user_data[message.chat.id]["–§.–ò.–û"] = message.text
    user_data[message.chat.id]["step"] = "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_birth_date_practice(message):
    msg = message.text
    if check_birthdate(msg):
        user_data[message.chat.id]["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–¥.–º–º.–≥–≥–≥–≥")
        return 0
    user_data[message.chat.id]["step"] = "–û–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å"
    bot.send_message(message.chat.id, "–ì–¥–µ –æ–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–û–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_education_practice(message):
    user_data[message.chat.id]["–û–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å"] = message.text
    user_data[message.chat.id]["step"] = "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
    bot.send_message(message.chat.id, "–ü–æ –∫–∞–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_profession_practice(message):
    user_data[message.chat.id]["–ü—Ä–æ—Ñ–µ—Å—Å–∏—è/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"] = message.text
    user_data[message.chat.id]["step"] = "–ö—É—Ä—Å"
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –∫—É—Ä—Å?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ö—É—Ä—Å" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_course_practice(message):
    user_data[message.chat.id]["–ö—É—Ä—Å"] = message.text
    user_data[message.chat.id]["step"] = "–°—Ä–æ–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏"
    bot.send_message(message.chat.id, "–°—Ä–æ–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–°—Ä–æ–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_practice_duration_practice(message):
    user_data[message.chat.id]["–°—Ä–æ–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏"] = message.text
    user_data[message.chat.id]["step"] = "–ü—Ä–æ—à–ª–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"
    bot.send_message(message.chat.id, "–ü—Ä–æ—Ö–æ–¥–∏–ª–∏ –ª–∏ –ø—Ä–∞–∫—Ç–∏–∫—É —Ä–∞–Ω–µ–µ? –ï—Å–ª–∏ –¥–∞, —Ç–æ –≥–¥–µ?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ü—Ä–æ—à–ª–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_previous_practice_practice(message):
    user_data[message.chat.id]["–ü—Ä–æ—à–ª–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"] = message.text
    user_data[message.chat.id]["step"] = "–ñ–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Ç–æ–º –∂–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏"
    bot.send_message(message.chat.id, "–•–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Ç–æ–º –∂–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏? (–î–∞/–ù–µ—Ç)")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ñ–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Ç–æ–º –∂–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_same_department_practice(message):
    user_data[message.chat.id]["–ñ–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Ç–æ–º –∂–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏"] = message.text
    user_data[message.chat.id]["step"] = "–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_contact_channel_practice(message):
    user_data[message.chat.id]["–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"] = message.text
    user_data[message.chat.id]["step"] = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" and user_data.get(message.chat.id, {}).get("form_type") == "practice")
def get_phone_number_practice(message):
    msg = message.text
    if check_phone_number(msg):
        user_data[message.chat.id]["–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: +71234567890 –∏–ª–∏ 81234567890")
        return 0
    user_data[message.chat.id]["step"] = "confirm_send"

    application_text = "\n".join(
        [f"{key}: {value}" for key, value in user_data[message.chat.id].items() if key not in ["step", "form_type"]])

    bot.send_message(message.chat.id,
                     f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n{application_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",reply_markup=confirm_menu())


# –ê–Ω–∫–µ—Ç–∞ –¥–ª—è "–õ–µ—Ç–Ω–µ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
@bot.message_handler(func=lambda message: message.text == "‚òÄÔ∏è –õ–µ—Ç–Ω–µ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
def start_summer_employment_form(message):
    user_data[message.chat.id] = {"step": "–§.–ò.–û", "form_type": "summer_employment"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§.–ò.–û:")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–§.–ò.–û" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_full_name_summer(message):
    user_data[message.chat.id]["–§.–ò.–û"] = message.text
    user_data[message.chat.id]["step"] = "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_birth_date_summer(message):
    msg = message.text
    if check_birthdate(msg):
        user_data[message.chat.id]["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–¥.–º–º.–≥–≥–≥–≥")
        return 0
    user_data[message.chat.id]["step"] = "–û–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å"
    bot.send_message(message.chat.id, "–ì–¥–µ –æ–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–û–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_education_summer(message):
    user_data[message.chat.id]["–û–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å"] = message.text
    user_data[message.chat.id]["step"] = "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
    bot.send_message(message.chat.id, "–ü–æ –∫–∞–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_profession_summer(message):
    user_data[message.chat.id]["–ü—Ä–æ—Ñ–µ—Å—Å–∏—è/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"] = message.text
    user_data[message.chat.id]["step"] = "–ö—É—Ä—Å"
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –∫—É—Ä—Å?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ö—É—Ä—Å" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_course_summer(message):
    user_data[message.chat.id]["–ö—É—Ä—Å"] = message.text
    user_data[message.chat.id]["step"] = "–ü–µ—Ä–∏–æ–¥ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
    bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ü–µ—Ä–∏–æ–¥ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_employment_period_summer(message):
    user_data[message.chat.id]["–ü–µ—Ä–∏–æ–¥ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"] = message.text
    user_data[message.chat.id]["step"] = "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"
    bot.send_message(message.chat.id, "–†–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –í—ã —Ä–∞–Ω–µ–µ, –µ—Å–ª–∏ –¥–∞, —Ç–æ –≥–¥–µ?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_previous_work_summer(message):
    user_data[message.chat.id]["–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"] = message.text
    user_data[message.chat.id]["step"] = "–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_contact_channel_summer(message):
    user_data[message.chat.id]["–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"] = message.text
    user_data[message.chat.id]["step"] = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" and user_data.get(message.chat.id, {}).get("form_type") == "summer_employment")
def get_phone_number_summer(message):
    msg = message.text
    if check_phone_number(msg):
        user_data[message.chat.id]["–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: +71234567890 –∏–ª–∏ 81234567890")
        return 0
    user_data[message.chat.id]["step"] = "confirm_send"

    application_text = "\n".join(
        [f"{key}: {value}" for key, value in user_data[message.chat.id].items() if key not in ["step", "form_type"]])

    bot.send_message(message.chat.id,
                     f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n{application_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",reply_markup=confirm_menu())


# –ê–Ω–∫–µ—Ç–∞ –¥–ª—è "–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è"
@bot.message_handler(func=lambda message: message.text == "üë®üèº‚Äçüéì –¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è")
def start_post_study_employment_form(message):
    user_data[message.chat.id] = {"step": "–§.–ò.–û", "form_type": "post_study_employment"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§.–ò.–û:")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–§.–ò.–û" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_full_name_post_study(message):
    user_data[message.chat.id]["–§.–ò.–û"] = message.text
    user_data[message.chat.id]["step"] = "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_birth_date_post_study(message):
    msg = message.text
    if check_birthdate(msg):
        user_data[message.chat.id]["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–¥.–º–º.–≥–≥–≥–≥")
        return 0
    user_data[message.chat.id]["step"] = "–û–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å"
    bot.send_message(message.chat.id, "–ì–¥–µ –æ–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–û–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_education_post_study(message):
    user_data[message.chat.id]["–û–±—É—á–∞–µ—Ç–µ—Å—å/–æ–±—É—á–∞–ª–∏—Å—å"] = message.text
    user_data[message.chat.id]["step"] = "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
    bot.send_message(message.chat.id, "–ü–æ –∫–∞–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_profession_post_study(message):
    user_data[message.chat.id]["–ü—Ä–æ—Ñ–µ—Å—Å–∏—è/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"] = message.text
    user_data[message.chat.id]["step"] = "–ö—É—Ä—Å"
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –∫—É—Ä—Å?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ö—É—Ä—Å" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_course_post_study(message):
    user_data[message.chat.id]["–ö—É—Ä—Å"] = message.text
    user_data[message.chat.id]["step"] = "–°—Ä–æ–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏"
    bot.send_message(message.chat.id, "–°—Ä–æ–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–°—Ä–æ–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_practice_duration_post_study(message):
    user_data[message.chat.id]["–°—Ä–æ–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏"] = message.text
    user_data[message.chat.id]["step"] = "–ü—Ä–æ—à–ª–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"
    bot.send_message(message.chat.id, "–ü—Ä–æ—Ö–æ–¥–∏–ª–∏ –ª–∏ –ø—Ä–∞–∫—Ç–∏–∫—É —Ä–∞–Ω–µ–µ? –ï—Å–ª–∏ –¥–∞, —Ç–æ –≥–¥–µ?")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ü—Ä–æ—à–ª–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_previous_practice_post_study(message):
    user_data[message.chat.id]["–ü—Ä–æ—à–ª–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"] = message.text
    user_data[message.chat.id]["step"] = "–ñ–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Ç–æ–º –∂–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏"
    bot.send_message(message.chat.id, "–•–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Ç–æ–º –∂–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏? (–î–∞/–ù–µ—Ç)")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ñ–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Ç–æ–º –∂–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_same_department_post_study(message):
    user_data[message.chat.id]["–ñ–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Ç–æ–º –∂–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏"] = message.text
    user_data[message.chat.id]["step"] = "–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=contact_channel_menu())


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_contact_channel_post_study(message):
    user_data[message.chat.id]["–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏"] = message.text
    user_data[message.chat.id]["step"] = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" and user_data.get(message.chat.id, {}).get("form_type") == "post_study_employment")
def get_phone_number_post_study(message):
    msg = message.text
    if check_phone_number(msg):
        user_data[message.chat.id]["–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"] = msg
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: +71234567890 –∏–ª–∏ 81234567890")
        return 0
    user_data[message.chat.id]["step"] = "confirm_send"

    application_text = "\n".join(
        [f"{key}: {value}" for key, value in user_data[message.chat.id].items() if key not in ["step", "form_type"]])

    bot.send_message(message.chat.id,
                     f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n{application_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",reply_markup=confirm_menu())

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "confirm_send")
def confirm_send(message):
    if message.text.lower() == "üì© –æ—Ç–ø—Ä–∞–≤–∏—Ç—å":
        application_text = "\n".join(
            [f"{key}: {value}" for key, value in user_data[message.chat.id].items() if key not in ["step", "form_type"]])
        form_type = user_data[message.chat.id].get("form_type")
        subject = f"–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –¥–ª—è {'–ø—Ä–∞–∫—Ç–∏–∫–∏' if form_type == 'practice' else '–ª–µ—Ç–Ω–µ–≥–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' if form_type == 'summer_employment' else '—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è' if form_type == 'post_study_employment' else '–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ —Ü–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –í–£–ó' if form_type == 'entrance_vuz' else '–æ–±—É—á–∞–µ—Ç—Å—è –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ –í–£–ó–µ' if form_type =='VUZ another question' else '–°–£–ó–∞'}"
        to_email = EMAIL_ADDRESS
        if send_email(subject, application_text, to_email):
            bot.send_message(message.chat.id, "‚úîÔ∏è –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ.")
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ.")
        bot.send_message(message.chat.id, f"–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:\n\n{application_text}")
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ üòä, –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –í–∞—à—É –∑–∞—è–≤–∫—É –∏ –≤–µ—Ä–Ω—É—Ç—Å—è –∫ –í–∞–º —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º üòâ", reply_markup=main_menu())
        if form_type == "practice" or form_type == "summer_employment" or form_type == "post_study_employment":
            bot.send_message(message.chat.id,"üìú –ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–∞–º—è—Ç–∫–æ–π", reply_markup=main_menu())
            with open("–ü–∞–º—è—Ç–∫–∞_–¥–ª—è_–±—É–¥—É—â–∏—Ö_–∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤.pdf", 'rb') as file:
                bot.send_document(message.chat.id, file)
        del user_data[message.chat.id]
    elif message.text.lower() == "‚úèÔ∏è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        user_data[message.chat.id]["step"] = "–§.–ò.–û"
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§.–ò.–û:")
    else:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",reply_markup=confirm_menu())


@bot.message_handler(func=lambda message: message.text == "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
def show_events(message):
    try:
        df = pd.read_excel('events.xlsx')

        markup = InlineKeyboardMarkup()

        for index, row in df.iterrows():
            event_name = row.iloc[0]
            event_date = row.iloc[1]
            event_url = row.iloc[2]


            try:
                event_date = pd.to_datetime(event_date).strftime('%d.%m.%Y')
            except:
                pass

            button_text = f"{event_name} ({event_date})"

            if isinstance(event_url, str) and event_url.startswith(('http://', 'https://')):
                markup.add(InlineKeyboardButton(text=button_text, url=event_url))
            else:
                print(f"–ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event_name}")

        if not markup.keyboard:
            bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
            return

        back_markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        back_markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", reply_markup=markup)

        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=back_markup)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {e}")
        bot.send_message(message.chat.id,
                         "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                         reply_markup=main_menu())
bot.polling(none_stop=True)